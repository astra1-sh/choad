name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # Matches semantic versioning tags like v1.2.3, v1.2.3-rc1

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          body: |
            ## Release ${{ github.ref_name }}
            
            Please see the [CHANGELOG](CHANGELOG.md) for details.
            
            ### Assets:
            - choad-x86_64-unknown-linux-gnu
            - choad-x86_64-pc-windows-msvc.exe
            - choad-x86_64-apple-darwin
            - choad-aarch64-apple-darwin

  build-and-upload:
    needs: create-release
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: choad-x86_64-unknown-linux-gnu
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name: choad-x86_64-pc-windows-msvc.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            asset_name: choad-x86_64-apple-darwin
          - target: aarch64-apple-darwin
            os: macos-latest
            asset_name: choad-aarch64-apple-darwin
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          cp choad ../../${{ matrix.asset_name }}
          cd ../../
          strip ${{ matrix.asset_name }} || true

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target\${{ matrix.target }}\release
          Copy-Item -Path "choad.exe" -Destination "..\..\${{ matrix.asset_name }}"

      - name: Upload Release Asset (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream